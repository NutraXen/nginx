# ---------------------------------------------------
#     CUSTOM BACKEND TO HANDLE PHP REQUESTS
#-----------------------------------------------------
upstream phpBackend {
  server 127.0.0.1:9000;
}





# ---------------------------------------------------
#     CLOUDAPP AZURE SERVER *.CLOUDAPP.NET
#-----------------------------------------------------
server {
  listen      80 default_server;
  server_name *.cloudapp.net;
  root   /usr/share/nginx/sites/wwwroot/;
  index  index.php index.html index.htm;
  keepalive_timeout     5s;
  allow                 all;
  server_tokens         off; 
  more_clear_headers    'Cache-Control';


  location / {
    try_files $uri $uri/ /index.html;
    allow all;
  }
  error_page   404  /404.html;
  location = /usr/share/nginx/sites/wwwroot/404.html {
    root   html;
    allow all;
  }
  error_page   500 502 503 504  /error.html;
    location = /usr/share/nginx/sites/wwwroot/error.html {
    root   html;
    allow all;
  }

  # PHP Files Handled Locally Via NGINX 
  # This will allow us to use git hooks to update the nginx config..
  location ~ \.php$ {
    try_files                       $uri =404;
    fastcgi_split_path_info         ^(.+\.php)(/.+)$;
    fastcgi_pass                    phpBackend;
    fastcgi_index                   index.php;
    # IMPORTANT BELOW - NEEDS FULL PATH TO SITE DIRECTORY !!!
    fastcgi_param                   SCRIPT_FILENAME  /usr/share/nginx/sites/wwwroot/$fastcgi_script_name;
    include                         fastcgi_params;
    fastcgi_intercept_errors        on;
    fastcgi_ignore_client_abort     off;
    fastcgi_connect_timeout         60;
    fastcgi_send_timeout            180;
    fastcgi_read_timeout            180;
    fastcgi_buffer_size             128k;
    fastcgi_buffers                 4 256k;
    fastcgi_busy_buffers_size       256k;
    fastcgi_temp_file_write_size    256k;
  }


      #======================================================
      #
      #          GLOBAL REDIRECT RULES ALL LOCATIONS
      #
      # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # BEGIN TEZIZE GEO IP LOCATION  (http://www.telize.com/)
        location ~ /geo/ip$
        {
            charset off;
            default_type text/plain;
            echo $remote_addr;
        }

        location ~ /geo/jsonip$
        {
            echo_exec /geo/jsonify ip=$remote_addr&callback=$arg_callback;
        }

        rewrite ^/geo/whois$ /geo/whois/ last; 

        location ~ /geo/whois/(?<ip>.*) {
            if ($ip = "")
            {
              set $ip $remote_addr;
            }
            proxy_set_header X-Real-IP $ip;
            proxy_pass $scheme://127.0.0.1/geo/localize?callback=$arg_callback;
            more_set_headers          "Server: TELIZE";
        }

        location /geo/localize {
          set_real_ip_from 127.0.0.1;
          echo_exec /geo/jsonify ip=$remote_addr&country_code=$geoip_city_country_code&country_code3=$geoip_city_country_code3&country=$geoip_city_country_name&region_code=$geoip_region&region=$geoip_region_name&city=$geoip_city&postal_code=$geoip_postal_code&continent_code=$geoip_city_continent_code&latitude=$geoip_latitude&longitude=$geoip_longitude&dma_code=$geoip_dma_code&area_code=$geoip_area_code&org=$geoip_org&timezone=$geoip_timezone&callback=$arg_callback;
        }

        location /geo/jsonify {
          access_log off;
          charset iso-8859-1;
          default_type application/json;
          if ($arg_org ~* "^(AS[0-9]+) (.+)") {
          set $asn $1;
          set $isp $2;
        }

        content_by_lua '
            local cjson = require("cjson")
            local callback = ngx.var.arg_callback
            local args = {
            ip = ngx.var.arg_ip,
            country_code = ngx.var.arg_country_code,
            country_code3 = ngx.var.arg_country_code3,
            country = ngx.var.arg_country,
            region = ngx.var.arg_region,
            region_code = ngx.var.arg_region_code,
            city = ngx.var.arg_city,
            postal_code = ngx.var.arg_postal_code,
            continent_code = ngx.var.arg_continent_code,
            latitude = ngx.var.arg_latitude,
            longitude = ngx.var.arg_longitude,
            dma_code = ngx.var.arg_dma_code,
            area_code = ngx.var.arg_area_code,
            timezone = ngx.var.arg_timezone,
            asn = ngx.var.asn,
            isp = ngx.var.isp
        }

          -- Validate args
          for item, value in pairs(args) do
          if args[item] == "" then
          args[item] = nil
          elseif item == "latitude" or item == "longitude" then
          args[item] = tonumber(value)
          end
          end

          if args["ip"] == "127.0.0.1" then
          ngx.status = ngx.HTTP_BAD_REQUEST
          ngx.say(cjson.encode({code = 401, message = "Input string is not a valid IP address"}))
          ngx.exit(ngx.HTTP_OK)
          end

          local json = cjson.encode(args)

          if callback ~= "" then
          ngx.say(callback, "(", json, ");")
          else
          ngx.say(json)
          end';
        }
      # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # END TELIZE GEO_IP RULES
      # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



  # Logging - Off
  access_log          /dev/null;
  error_log           /dev/null;
}






# ------------------------------------------
#     AZURE TRAFFIC MANAGER MONITORING PAGE
#-------------------------------------------
server {
  listen      100 default_server;
  #server_name *.cloudapp.net;

  # Actual Page
  location / {
   root   /usr/share/nginx/sites/wwwroot/status/;
   index  index.html;
   allow all;
   gzip                      on;
   gzip_vary                 on;
 }

 # Turn off logging
 access_log          /dev/null;
 error_log           /dev/null;

 # Logging - ON
 #error_log        /var/log/nginx/default-error.log;
 #access_log       /var/log/nginx/default-access.log;


}

